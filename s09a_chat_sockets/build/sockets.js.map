{"version":3,"sources":["../src/sockets.js"],"names":["users","sockets","reset","user","Object","keys","disconnect","configureSocketSever","httpServer","io","Server","on","socket","handshake","query","session","id","userExists","Boolean","console","log","broadcast","emit","table","message"],"mappings":"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","sourcesContent":["import { Server } from 'socket.io';\r\n\r\nlet users = {};\r\nlet sockets = {};\r\n\r\nexport const reset = () => {\r\n\tfor (const user of Object.keys(sockets)) {\r\n\t\tsockets[user].disconnect();\r\n\t}\r\n\tusers = {};\r\n\tsockets = {};\r\n};\r\n\r\nexport const configureSocketSever = httpServer => {\r\n\tconst io = new Server(httpServer);\r\n\r\n\tio.on('connection', socket => {\r\n\t\tconst { user } = socket.handshake.query;\r\n\t\tconst session = {\r\n\t\t\tid: socket.id,\r\n\t\t\tuser: user,\r\n\t\t};\r\n\r\n\t\tconst userExists = Boolean(users[session.user]);\r\n\t\tif (userExists && users[session.user] !== session.id) {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`[INFO] Sesión para el usuario ${session.user} ya existente! Cerrando conexión...`\r\n\t\t\t);\r\n\r\n\t\t\tusers[session.id] = null;\r\n\t\t\tusers[session.user] = null;\r\n\t\t\tsocket.disconnect();\r\n\t\t} else {\r\n\t\t\tconsole.log(`[INFO] Se ha conectado el usuario ${session.user}!`);\r\n\t\t\tusers[session.user] = session.id;\r\n\t\t\tsockets[session.id] = socket;\r\n\t\t\tsocket.broadcast.emit('user-connect', {\r\n\t\t\t\tuser: session.user,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconsole.table(users);\r\n\r\n\t\tsocket.on('ping', () => {\r\n\t\t\tsocket.emit('pong');\r\n\t\t});\r\n\r\n\t\tsocket.on('disconnect', () => {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`[INFO] El usuario ${session.user} se ha desconectado.`\r\n\t\t\t);\r\n\r\n\t\t\tconsole.table(users);\r\n\t\t});\r\n\r\n\t\tsocket.on('close', () => {\r\n\t\t\tusers[session.id] = null;\r\n\t\t\tusers[session.user] = null;\r\n\r\n\t\t\tsocket.broadcast.emit('user-disconnect', {\r\n\t\t\t\tuser: session.user,\r\n\t\t\t});\r\n\t\t\tsocket.disconnect();\r\n\t\t});\r\n\r\n\t\tsocket.on('client-message', ({ message }) => {\r\n\t\t\tconsole.log(`[INFO] ${session.user} enviado un mensaje!`);\r\n\r\n\t\t\tsocket.broadcast.emit('server-message', {\r\n\t\t\t\tuser: session.user,\r\n\t\t\t\tmessage: message,\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n};\r\n\r\nexport { users, sockets };"],"file":"sockets.js"}